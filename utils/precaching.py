from urllib.request import Request

from httpreq.http_replica_server import InternalServer


class PreCachedResource():
    @staticmethod
    def get_paths():
        return ["Jeffrey_Dahmer",
                "Rishi_Sunak",
                "-",
                "Cleopatra",
                "House_of_the_Dragon",
                "Christopher_Scarver",
                "Ponniyin_Selvan:_I",
                "Black_Adam_(film)",
                "Kantara_(film)",
                "YouTube",
                "Deaths_in_2022",
                "Marilyn_Monroe",
                "Liz_Truss",
                "ICC_Men's_T20_World_Cup",
                "John_Wayne_Gacy",
                "Robbie_Coltrane",
                "The_Lord_of_the_Rings:_The_Rings_of_Power",
                "XXX:_Return_of_Xander_Cage",
                "2022_Russian_invasion_of_Ukraine",
                "2022_ICC_Men's_T20_World_Cup",
                "Halloween",
                "Leslie_Jordan",
                "Halloween_Ends",
                "The_Watcher_(2022_TV_series)",
                "Elon_Musk",
                "Smile_(2022_film)",
                "Akshata_Murty",
                "Angela_Lansbury",
                "Kanye_West",
                "Empress_Elisabeth_of_Austria",
                "Erling_Haaland",
                "Evan_Peters",
                "2022_FIFA_World_Cup",
                "XNXX",
                "Diwali",
                "2022_Brazilian_general_election",
                "Charles_Cullen",
                "XXX_(film_series)",
                "Bible",
                "Jerry_Lee_Lewis",
                "Elizabeth_II",
                "Premier_League",
                "Black_Adam",
                "Wikipedia",
                "Loretta_Lynn",
                "Emma_D'Arcy",
                "Andor_(TV_series)",
                "Ansel_Adams",
                "Facebook",
                "Michael_J._Fox",
                "Dahmer_‚Äì_Monster:_The_Jeffrey_Dahmer_Story",
                "Google",
                "Prime_Minister_of_the_United_Kingdom",
                "Franz_Joseph_I_of_Austria",
                "Cristiano_Ronaldo",
                "Vikram_Vedha_(2022_film)",
                "United_States",
                "Rishab_Shetty",
                "Luckiest_Girl_Alive_(film)",
                "Jesse_Anderson",
                "Charles_III",
                "Andrew_Tate",
                "Ted_Bundy",
                "She-Hulk:_Attorney_at_Law",
                "N._R._Narayana_Murthy",
                "Suella_Braverman",
                "Midnights",
                "Don't_Worry_Darling",
                "XXX_(2002_film)",
                "Terrifier_2",
                "Taylor_Swift",
                "Lionel_Messi",
                "Godfather_(2022_film)",
                "India",
                "Werewolf_by_Night_(TV_special)",
                "XXXX_(beer)",
                "Jamie_Lee_Curtis",
                "Web_server_directory_index",
                "Barbarian_(2022_film)",
                "Elvis_Presley",
                "Internet",
                "Ponniyin_Selvan",
                "Herschel_Walker",
                "United_Kingdom",
                "Hocus_Pocus_(1993_film)",
                "Hocus_Pocus_2",
                "Tom_Brady",
                "Google_Translate",
                "BrahmƒÅstra:_Part_One_‚Äì_Shiva",
                "UFC_280",
                "Skathi_(moon)",
                "The_Midnight_Club",
                "Luckiest_Girl_Alive",
                "Ed_Gein",
                "Penny_Mordaunt",
                "Instagram",
                "Dwayne_Johnson",
                "John_Fetterman",
                "Hellraiser_(2022_film)",
                "Aaron_Judge",
                "List_of_A_Certain_Magical_Index_characters",
                "Black_Panther:_Wakanda_Forever",
                "Ram_Setu_(film)",
                "List_of_serial_killers_by_number_of_victims",
                "Halloween_(franchise)",
                "Kwasi_Kwarteng",
                "Gmail",
                "Bigg_Boss_(Hindi_season_16)",
                "Russia",
                "XXXTentacion",
                "Terrifier",
                "CEO",
                "Boris_Johnson",
                "Extreme_Rules_(2022)",
                "Blonde_(2022_film)",
                "Tulsi_Gabbard",
                "Guillermo_del_Toro's_Cabinet_of_Curiosities",
                "Islam_Makhachev",
                "Russo-Ukrainian_War",
                "Mila_Kunis",
                "YouTube_Music",
                "Susan_Wojcicki",
                "Bobby_Cannavale",
                "Necrophilia",
                "Xi_Jinping",
                "American_Horror_Story",
                "YouTube_Premium",
                "Chainsaw_Man",
                "Jeremy_Hunt",
                "Gisele_B√ºndchen",
                "Adipurush",
                "Olivia_Cooke",
                "The_School_for_Good_and_Evil_(film)",
                "World_War_II",
                "Ukraine",
                "Video_hosting_service",
                "XXXX",
                "Luiz_In√°cio_Lula_da_Silva",
                "Coolio",
                "The_Good_Nurse",
                "Laal_Singh_Chaddha",
                "UEFA_Champions_League",
                "Game_of_Thrones",
                "Vladimir_Putin",
                "Matt_Smith",
                "2022_Formula_One_World_Championship",
                "Amsterdam_(2022_film)",
                "World_War_I",
                "Olivia_Wilde",
                "Blink-182",
                "Cat",
                "Top_Gun:_Maverick",
                "Ballon_d'Or",
                "The_Empress_(TV_series)",
                "Call_of_Duty:_Modern_Warfare_II_(2022_video_game)",
                "Stoneman_Douglas_High_School_shooting",
                "Hu_Jintao",
                "List_of_prime_ministers_of_the_United_Kingdom",
                "Dancing_with_the_Stars_(American_season_31)",
                "Princess_Margaret,_Countess_of_Snowdon",
                "Naomi_Watts",
                "Julia_Roberts",
                "Emmett_Till",
                "John_Balcerzak",
                "Raindrop_cake",
                "Google_Classroom",
                "Twitter"]

    @staticmethod
    def populate(cache, origin):
        popular_paths = PreCachedResource.get_paths()
        # for i in range(len(popular_paths)):
        #     path = popular_paths[i].replace(" ", "_")
        #     try:
        #         req = Request(complete_url)
        #         response = urlopen(req)
        #         downloaded_data = response.read()
        #         _cache.cache_website(data_path, downloaded_data)
        #         return LocalResponse(downloaded_data, Constants.HTTP_STATUS_CODE_OK)
        #
        #     except Exception as e:
        #         return LocalResponse("", Constants.HTTP_NOT_FOUND_RESPONSE_CODE)
